LAB 3

3.1)

CREATE OR REPLACE FUNCTION get_age(dob DATE) 
RETURN NUMBER
  is  
  BEGIN 
     RETURN TRUNC(((SYSDATE-DOB)/365),0);         
  END get_age;
    
variable age number;
exec :age := get_age('6-sep-1994');
print :age;

--SELECT * FROM USER_ERRORS

3.2)CREATE OR REPLACE PROCEDURE get_manager(
	  v_staff_code  IN  staff_master.staff_code%TYPE, 
	  v_staff_code1 OUT staff_master.staff_code%TYPE,
	  v_staff_name  OUT staff_master.staff_name%TYPE,
	  v_dept_code   OUT staff_master.dept_code%TYPE,
	  v_manager     OUT staff_master.staff_name%TYPE)
	  AS v_code number;
	  manager_not_found EXCEPTION;
	  
	  BEGIN
		
		SELECT staff.staff_code, staff.staff_name,  staff.dept_code, mgr.staff_name
		INTO 	  v_staff_code1,     v_staff_name,      v_dept_code,      v_manager
		FROM staff_master staff, staff_master mgr
		WHERE staff.staff_code = v_staff_code
		AND mgr.staff_code = staff.mgr_code;
		
		IF v_manager IS NULL THEN
			RAISE manager_not_found;
		END IF;
		EXCEPTION
			WHEN manager_not_found THEN
			dbms_output.put_line('Giving staff code not have Manager');
			WHEN no_data_found THEN
			dbms_output.put_line('No such data found');
	  END;
		
		DECLARE
			v_staff_code1   staff_master.staff_code%TYPE;
			v_staff_name	staff_master.staff_name%TYPE;
			v_dept_code		staff_master.dept_code%TYPE;
			v_manager		staff_master.staff_name%TYPE;
		BEGIN
			get_manager(&v_staff_code, v_staff_code1, v_staff_name, v_dept_code, v_manager);
			dbms_output.put_line('Staff code: '|| v_staff_code1);
			dbms_output.put_line('Staff name: '|| v_staff_name);
			dbms_output.put_line('Dept No: '   || v_dept_code);
			dbms_output.put_line('Manager is: '|| v_manager);
		END;


3.3)
CREATE OR REPLACE FUNCTION calci(s_code IN staff_masters.staff_code%TYPE)
RETURN NUMBER AS
da staff_masters.staff_sal%TYPE ;
hra staff_masters.staff_sal%TYPE;
ta staff_masters.staff_sal%TYPE;
spal staff_masters.staff_sal%TYPE;
ctc staff_masters.staff_sal%TYPE;
service NUMBER;
sal staff_masters.staff_sal%TYPE;
datel staff_masters.hiredate%TYPE
 BEGIN
  SELECT staff_sal,hiredate INTO sal,date1
  FROM staff_masters
  WHERE staff_code=s_code;
   da:=ROUND(0.15*sal);
   hra:=ROUND(0.20*sal);
   ta:=ROUND(0.8*sal);
   service:=(MONTHS_BETWEEN(SYSDATE,date1)/12);
   IF(service<1) THEN
    spal:=0.0;
   ELSEIF(service>=1 AND service<2) THEN
    spal:=ROUND(0.10*sal);
   ELSEIF(service>=2 AND service<4) THEN
    spal:=ROUND(0.20*sal);
   ELSEIF(service>4) THEN
    spal:=ROUND(0.30*sal);
   END IF;
  ctc:=ROUND(da+hra+ta+sal+spal);
  RETURN ctc;
 END;
SELECT calctc('&staff_code') FROM DUAL;
SHOW ERROR;



3.4)CREATE TABLE staff_master_back AS
	SELECT * FROM staff_master;

    CREATE OR REPLACE
	PROCEDURE salaryUpdate(
	staffCode IN staff_master.staff_code%TYPE) AS
	expYears NUMBER;
	no_update_salary EXCEPTION;
	oldsalary staff_master.staff_sal%TYPE;
	newsalary staff_master.staff_sal%TYPE;
     BEGIN
	SELECT staff_sal, ROUND(MONTHS_BETWEEN(sysdate,hiredate)/12)
	INTO oldsalary,expYears
	FROM staff_master
	WHERE staff_code = staffCode;
		IF expYears < 2 THEN
			RAISE no_update_salary;
		ELSIF expYears > 2 AND expYears < 5 THEN
			newsalary:= 1.20*oldsalary;
		ELSE
		        newsalary:= 1.25*oldsalary;
		END IF;
		INSERT INTO staff_master_back
		SELECT * FROM staff_master WHERE staff_code = staffcode;
		UPDATE staff_master SET staff_sal = newsalary WHERE staff_code = staffCode;
		dbms_output.put_line('Updated salary is '||newsalary);
		EXCEPTION
			WHEN NO_DATA_FOUND THEN
			DBMS_OUTPUT.PUT_LINE('NO DATA');
			WHEN no_update_salary THEN
			DBMS_OUTPUT.PUT_LINE('EXPERIENCE IS NOT SUFFICIENT FOR UPDATE');
      END;

      BEGIN
	 salaryUpdate(&code);
      END;
      
3.5)
CREATE OR REPLACE PROCEDURE book1(bcode IN book_masters.book_code%TYPE,stucode IN student_masters.student_code%TYPE,
stacode IN staff_masters.staff_code%TYPE)
AS
issue_date book_transactions.book_issue_date%TYPE;
ret_date book_transactions.book_expected_return_date%TYPE;
ac_ret_date book_transactions.book_actual_return_date%TYPE;
BEGIN
 issue_date:=sysdate;
 return_date:=sysdate+10;
 ac_ret_date:=ret_date;
 IF next_day(issue_date+7,'saturday')=ret_date THEN
 ret_date:=ret_date+2;
 END IF;

 INSERT INTO book_transactions VALUES(bcode,stacode,issue_date,ret_date,ac_ret_date);
END;

DECLARE
BEGIN
 book1('&bcode','&stucode','&stacode');
END;